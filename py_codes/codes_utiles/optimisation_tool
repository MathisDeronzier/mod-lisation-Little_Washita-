#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Aug 26 18:59:48 2021

@author: mathis
"""
import numpy as np

########## Les fonctions utiles ############
def dist(u,v,x):
    #La distance d'un point à la droite définie par le couple (u,v) voir rapport
    y=(x-v)
    return y.dot(y)-(y.dot(u))**2/(u.dot(u))

    
def f(U,X):
    #La fonction que l'on va chercher à optimiser
    tot=0   
    for x in X:
        tot+=min(dist(U[0],U[1],x), dist(U[2],U[3],x))
    return tot

def grad(f,U,eps):
    #Calcule empirique du gradient
    dim=U.shape
    grad=np.zeros((dim[0],dim[1]))
    for i in range(dim[0]):
        for j in range(dim[1]):
            U_1=U
            U_1[i,j]=U_1[i,j]+eps
            grad[i,j]=(f(U_1)-f(U))/eps
    return grad

def armijo(f,U,eps):
    #Permettant de calculer le pas 
    alpha=1
    G=grad(f,U,eps)
    while f(U-alpha*G)>-alpha*G.dot(G)/2:
        alpha/=2
    return U-alpha*G

def proj(U):
    #La projection pour appliquer l'algorithme d'Uzawa
    U[0]=U[0]/(U[0].dot(U[0]))
    U[2]=U[2]/(U[2].dot(U[2]))
    
def uzawa(U_0,X,eps):
    def F(U_0):
        return f(U_0,X)
    #C'est la fonction d'optimisation que nous allons utiliser
    U_1=proj(armijo(F,U_0,eps))
    while F(U_1)-F(U_1)>100*eps:
        U_0, U_1 = U_1, proj(armijo(F,U_0,eps))
    return U_1


def intersect(X,Y):
    #renvoie l'intersection de deux listes triées par ordre croissant
    n=len(X)
    m=len(Y)
    a=0
    b=0
    l=[]
    while a<n and b<m:
        if X[a]==Y[b]:
            l.append(X[a])
            a+=1
            b+=1
        else:
            if X[a]>Y[b]:
                b+=1
            else:
                a+=1
    return np.array(l)

def union(X,Y):
    #renvoie l'union triée des deux listes triées par ordre croissant
    n=len(X)
    m=len(Y)
    a=0
    b=0
    l=[]
    while a<n or b<m:
        if X[a]==Y[b]:
            l.append(X[a])
            a+=1
            b+=1
        else:
            if X[a]>Y[b]:
                l.append(b)
                b+=1
            else:
                l.append(a)
                a+=1
    return np.array(l)
        