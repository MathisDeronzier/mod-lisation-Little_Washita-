}
#layout(matrix(1:4,2,2))
for (i in (2:5)){
plot(Quantile_simu_etr[,1], Quantile_simu_etr[,i], main = paste("tracé Q-Q etp deg (x",(2*(i-1)+1)^2,")",sep=""), xlab = "quantiles série ref", ylab="quantiles série deg")
abline(0,1)
}
N=500
Quant<-function(serie){return(quantile(serie,probs=seq(0,1,length.out=N)))}
Quantile_simu_deb<-apply(simu_deb,2,Quant)
Quantile_simu_etr<-apply(simu_etr,2,Quant)
#layout(matrix(1:4,2,2))
for (i in (2:5)){
layout(matrix(1:2,1,2))
plot(Quantile_simu_deb[,1], Quantile_simu_deb[,i], main = paste("tracé Q-Q precip dwnsc (x",(2*(i-1)+1)^2,")",sep=""), xlab = "quantiles série ref", ylab="quantiles série deg")
abline(0,1)
#
plot(Quantile_simu_etr[,1], Quantile_simu_etr[,i], main = paste("tracé Q-Q etp deg (x",(2*(i-1)+1)^2,")",sep=""), xlab = "quantiles série ref", ylab="quantiles série deg")
abline(0,1)
}
N=500
Quant<-function(serie){return(quantile(serie,probs=seq(0,1,length.out=N)))}
Quantile_simu_deb<-apply(simu_deb,2,Quant)
Quantile_simu_etr<-apply(simu_etr,2,Quant)
#layout(matrix(1:4,2,2))
for (i in (2:5)){
layout(matrix(1:2,1,2))
plot(Quantile_simu_deb[,1], Quantile_simu_deb[,i], main = paste("tracé Q-Q precip dwnsc (x",(2*(i-1)+1)^2,")",sep=""), xlab = "quantiles série ref", ylab="quantiles série deg")
abline(0,1)
#
plot(Quantile_simu_etr[,1], Quantile_simu_etr[,i], main = paste("tracé Q-Q etp dwnsc (x",(2*(i-1)+1)^2,")",sep=""), xlab = "quantiles série ref", ylab="quantiles série deg")
abline(0,1)
}
# on va regarder l'autocorrelation sur 15 jours
T=15
delta_t<-(1:(T+1))
ACF_series<-function(serie){return(acf(serie,type="correlation",lag.max=T,plot=FALSE)$acf)}
#Cacul de l'ACF pour les differentes series
ACF_simu_deb<- apply(simu_deb,2,ACF_series)
ACF_simu_etpr<-apply(simu_etpr,2,ACF_series)
source(paste(loc,"/codes_utiles/test_stat_Cramer_von_Mises.R",sep=""))
installed.packages(goftest)
install.packages(goftest)
install.packages("‘goftest’")
source(paste(loc,"/codes_utiles/test_stat_Cramer_von_Mises.R",sep=""))
installed.packages(goftest)
install.packages("‘goftest’")
library(goftest)
install.packages("goftest")
library(goftest)
decal<-0
points_pr<-which(pr_series[,1]>0)
debits<-simu_deb[points_pr,1]
points<-points_pr[which(debits>0)]
for(i in 2:5){
layout(matrix(1:2,1,2))
D_R<-(pr_series[points,i]-pr_series[points,1])/pr_series[points,1]
D_Q<-(simu_deb[points,i]-simu_deb[points,1])/simu_deb[points,1]
D_R2<-D_R^2
D_R3<-D_R^3
mod_Q_R<-lm(D_Q~D_R+D_R2)
x=seq(from=-1, to=2.5, by=3/1000)
plot(D_R,D_Q, main= paste("delta Q /delta R dwnsc (x",(2*i-1)^2,")", sep=""), xlab="delta R", ylab="delta Q", xlim = c(-1,2),ylim=c(-1,2.5))
lines(x,mod_Q_R$coeff[1]+mod_Q_R$coeff[2]*x+mod_Q_R$coeff[3]*x^2, col="red")
D_pr<-(pr_series[points,i+5]-pr_series[points,1])/pr_series[points,1]
D_deb<-(simu_deb[points,i+5]-simu_deb[points,1])/simu_deb[points,1]
D_pr2<-D_pr^2
D_pr3<-D_pr^3
mod<-lm(D_deb~D_pr+D_pr2)
range_D_pr<-range(D_pr)
x=seq(from=-1, to=2.5, by=3/1000)
plot(D_pr,D_deb, main= paste("delta Q /delta R dwnsc (x",(2*i-1)^2,")", sep=""), xlab="delta R", ylab="delta Q", xlim = c(-1,2),ylim=c(-1,2.5))
lines(x, col="red")
##On va rajouter des droites de regression
}
mod
decal<-0
points_pr<-which(pr_series[,1]>0)
debits<-simu_deb[points_pr,1]
points<-points_pr[which(debits>0)]
for(i in 2:5){
layout(matrix(1:2,1,2))
D_R<-(pr_series[points,i]-pr_series[points,1])/pr_series[points,1]
D_Q<-(simu_deb[points,i]-simu_deb[points,1])/simu_deb[points,1]
D_R2<-D_R^2
D_R3<-D_R^3
mod_Q_R<-lm(D_Q~D_R+D_R2)
x=seq(from=-1, to=2.5, by=3/1000)
plot(D_R,D_Q, main= paste("delta Q /delta R dwnsc (x",(2*i-1)^2,")", sep=""), xlab="delta R", ylab="delta Q", xlim = c(-1,2),ylim=c(-1,2.5))
lines(x,mod_Q_R$coeff[1]+mod_Q_R$coeff[2]*x+mod_Q_R$coeff[3]*x^2, col="red")
lines(x, col="red")
D_pr<-(pr_series[points,i+5]-pr_series[points,1])/pr_series[points,1]
D_deb<-(simu_deb[points,i+5]-simu_deb[points,1])/simu_deb[points,1]
D_pr2<-D_pr^2
D_pr3<-D_pr^3
mod<-lm(D_deb~D_pr+D_pr2)
range_D_pr<-range(D_pr)
x=seq(from=-1, to=2.5, by=3/1000)
plot(D_pr,D_deb, main= paste("delta Q /delta R dwnsc (x",(2*i-1)^2,")", sep=""), xlab="delta R", ylab="delta Q", xlim = c(-1,2),ylim=c(-1,2.5))
lines(x, col="red")
##On va rajouter des droites de regression
}
decal<-0
points_pr<-which(pr_series[,1]>0)
debits<-simu_deb[points_pr,1]
points<-points_pr[which(debits>0)]
for(i in 2:5){
layout(matrix(1:2,1,2))
D_R<-(pr_series[points,i]-pr_series[points,1])/pr_series[points,1]
D_Q<-(simu_deb[points,i]-simu_deb[points,1])/simu_deb[points,1]
D_R2<-D_R^2
D_R3<-D_R^3
mod_Q_R<-lm(D_Q~D_R+D_R2)
x=seq(from=-1, to=2.5, by=3/1000)
plot(D_R,D_Q, main= paste("delta Q /delta R dwnsc (x",(2*i-1)^2,")", sep=""), xlab="delta R", ylab="delta Q", xlim = c(-1,2),ylim=c(-1,2.5))
#lines(x,mod_Q_R$coeff[1]+mod_Q_R$coeff[2]*x+mod_Q_R$coeff[3]*x^2, col="red")
lines(x,x col="red")
decal<-0
points_pr<-which(pr_series[,1]>0)
debits<-simu_deb[points_pr,1]
points<-points_pr[which(debits>0)]
for(i in 2:5){
layout(matrix(1:2,1,2))
D_R<-(pr_series[points,i]-pr_series[points,1])/pr_series[points,1]
D_Q<-(simu_deb[points,i]-simu_deb[points,1])/simu_deb[points,1]
D_R2<-D_R^2
D_R3<-D_R^3
mod_Q_R<-lm(D_Q~D_R+D_R2)
x=seq(from=-1, to=2.5, by=3/1000)
plot(D_R,D_Q, main= paste("delta Q /delta R dwnsc (x",(2*i-1)^2,")", sep=""), xlab="delta R", ylab="delta Q", xlim = c(-1,2),ylim=c(-1,2.5))
#lines(x,mod_Q_R$coeff[1]+mod_Q_R$coeff[2]*x+mod_Q_R$coeff[3]*x^2, col="red")
lines(x,x, col="red")
D_pr<-(pr_series[points,i+5]-pr_series[points,1])/pr_series[points,1]
D_deb<-(simu_deb[points,i+5]-simu_deb[points,1])/simu_deb[points,1]
D_pr2<-D_pr^2
D_pr3<-D_pr^3
mod<-lm(D_deb~D_pr+D_pr2)
range_D_pr<-range(D_pr)
x=seq(from=-1, to=2.5, by=3/1000)
plot(D_pr,D_deb, main= paste("delta Q /delta R dwnsc (x",(2*i-1)^2,")", sep=""), xlab="delta R", ylab="delta Q", xlim = c(-1,2),ylim=c(-1,2.5))
lines(x,x, col="red")
##On va rajouter des droites de regression
}
decal<-0
points_pr<-which(pr_series[,1]>0)
debits<-simu_deb[points_pr,1]
points<-points_pr[which(debits>0)]
for(i in 2:5){
layout(matrix(1:2,1,2))
D_R<-(pr_series[points,i]-pr_series[points,1])/pr_series[points,1]
D_Q<-(simu_deb[points,i]-simu_deb[points,1])/simu_deb[points,1]
D_R2<-D_R^2
D_R3<-D_R^3
mod_Q_R<-lm(D_Q~D_R+D_R2)
x=seq(from=-1, to=2.5, by=3/1000)
plot(D_R,D_Q, main= paste("delta Q /delta R dwnsc (x",(2*i-1)^2,")", sep=""), xlab="delta R", ylab="delta Q", xlim = c(-1,2),ylim=c(-1,2.5))
#lines(x,mod_Q_R$coeff[1]+mod_Q_R$coeff[2]*x+mod_Q_R$coeff[3]*x^2, col="red")
lines(x,x, col="red")
D_pr<-(pr_series[points,i+5]-pr_series[points,1])/pr_series[points,1]
D_deb<-(simu_deb[points,i+5]-simu_deb[points,1])/simu_deb[points,1]
D_pr2<-D_pr^2
D_pr3<-D_pr^3
mod<-lm(D_deb~D_pr+D_pr2)
range_D_pr<-range(D_pr)
x=seq(from=-1, to=2.5, by=3/1000)
plot(D_pr,D_deb, main= paste("delta Q /delta R deg (x",(2*i-1)^2,")", sep=""), xlab="delta R", ylab="delta Q", xlim = c(-1,2),ylim=c(-1,2.5))
lines(x,x, col="red")
##On va rajouter des droites de regression
}
for (decal in -1:3){
for (i in 2:2){
if(decal>=0){
points_pr<-((decal+1):n)
points_deb<-(1:(n-decal))
}
else{
points_deb<-((1-decal):n)
points_pr<-(1:(n+decal))
}
layout(matrix(1:2,1,2))
plot((etp_series[points_pr,i]-etp_series[points_pr,1])/etp_series[points_pr,1],(simu_etr[points_deb,i]-simu_etr[points_deb,1])/simu_etr[points_deb,1], main= paste("dlt etr/dlt etp dwnsc(", ((2*i-1)^2),") decal=",decal, sep=""), xlab="delta etp", ylab="delta etr", xlim = c(-1,1),ylim=c(-1,1))
abline(0,1,col="red")
abline(0,0,col="red")
plot((etp_series[points_pr,i+5]-etp_series[points_pr,1])/etp_series[points_pr,1],(simu_etr[points_deb,2]-simu_etr[points_deb,1])/simu_etr[points_deb,1], main= paste("dlt etr/dlt etp deg(", ((2*i-1)^2),") decal=",decal, sep=""), xlab="delta etp", ylab="delta etr", xlim = c(-1,1),ylim=c(-1,1))
abline(0,1,col="red")
abline(1,0,col="red")
}
}
for (decal in -1:3){
for (i in 2:2){
if(decal>=0){
points_pr<-((decal+1):n)
points_deb<-(1:(n-decal))
}
else{
points_deb<-((1-decal):n)
points_pr<-(1:(n+decal))
}
layout(matrix(1:2,1,2))
plot((etp_series[points_pr,i]-etp_series[points_pr,1])/etp_series[points_pr,1],(simu_etr[points_deb,i]-simu_etr[points_deb,1])/simu_etr[points_deb,1], main= paste("dlt etr/dlt etp dwnsc(", ((2*i-1)^2),") decal=",decal, sep=""), xlab="delta etp", ylab="delta etr", xlim = c(-1,1),ylim=c(-1,1))
abline(0,1,col="red")
abline(v=0,col="red")
plot((etp_series[points_pr,i+5]-etp_series[points_pr,1])/etp_series[points_pr,1],(simu_etr[points_deb,2]-simu_etr[points_deb,1])/simu_etr[points_deb,1], main= paste("dlt etr/dlt etp deg(", ((2*i-1)^2),") decal=",decal, sep=""), xlab="delta etp", ylab="delta etr", xlim = c(-1,1),ylim=c(-1,1))
abline(0,1,col="red")
abline(v=0,col="red")
}
}
boxplot(simu_deb, main = "boxplot débits", xlab="degradation")
boxplot(simu_etr, main = "boxplot etpr",xlab="degradation")
for (decal in -1:3){
if(decal>=0){
points_pr<-((decal+1):n)
points_deb<-(1:(n-decal))
}
else{
points_deb<-((1-decal):n)
points_pr<-(1:(n+decal))
}
#layout(matrix(1:2,1,2))
plot((prr_series[points_pr,2]-prr_series[points_pr,1])/prr_series[points_pr,1],(simu_deb[points_deb,2]-simu_deb[points_deb,1])/simu_deb[points_deb,1], main= paste("delta Q /delta R dwnsc decal=",decal, sep=""), xlab="delta R", ylab="delta Q", xlim = c(-1,1),ylim=c(-1,1))
#abline(0,1,col="red")
#abline(0,0,col="red")
#plot((pr_series[points_pr,2]-pr_series[points_pr,1])/pr_series[points_pr,1],(simu_deb[points_deb,2]-simu_deb[points_deb,1])/simu_deb[points_deb,1], main= paste("delta Q /delta R deg decal=",decal, sep=""), xlab="delta R", ylab="delta Q", xlim = c(-1,1),ylim=c(-1,1))
#abline(0,1,col="red")
#abline(0,0,col="red")
}
D_proj<-TRUE
DATES <- read.csv(paste(loc,"/series/dates_1979_2014.csv", sep=""))[,(2:4)]
#On fixe les dates de calibration et de projection
if (D_proj){
proj <- which (DATES[,1]>=1996)
}
if(D_proj==FALSE){
proj <- which (DATES[,1]<1996)
}
simulations_ref<- -read.csv(paste(loc,"/series/simu_ref.csv", sep=""))[,c(2,3,4,19)]
simulations_ds1<- -read.csv(paste(loc,"/series/simu_ds1.csv", sep=""))[,c(2,3,4,19)]
simulations_ds2<- -read.csv(paste(loc,"/series/simu_ds2.csv", sep=""))[,c(2,3,4,19)]
simulations_ds3<- -read.csv(paste(loc,"/series/simu_ds3.csv", sep=""))[,c(2,3,4,19)]
simulations_ds4<- -read.csv(paste(loc,"/series/simu_ds4.csv", sep=""))[,c(2,3,4,19)]
simulations_dsI<- -read.csv(paste(loc,"/series/simu_dsI.csv", sep=""))[,c(2,3,4,19)]
simulations_deg1<- -read.csv(paste(loc,"/series/simu_deg1.csv", sep=""))[,c(2,3,4,19)]
simulations_deg2<- -read.csv(paste(loc,"/series/simu_deg2.csv", sep=""))[,c(2,3,4,19)]
simulations_deg3<- -read.csv(paste(loc,"/series/simu_deg3.csv", sep=""))[,c(2,3,4,19)]
simulations_deg4<- -read.csv(paste(loc,"/series/simu_deg4.csv", sep=""))[,c(2,3,4,19)]
simulations_IPSL<- -read.csv(paste(loc,"/series/simu_IPSL.csv", sep=""))[,c(2,3,4,19)]
#On crée maintenant nos séries temporelles telles quelles soient journalières
times_ref<- which( simulations_ref[,1]%%86400 ==0)
times_ds1<- which( simulations_ds1[,1]%%86400 ==0)
times_ds2<- which( simulations_ds2[,1]%%86400 ==0)
times_ds3<- which( simulations_ds3[,1]%%86400 ==0)
times_ds4<- which( simulations_ds4[,1]%%86400 ==0)
times_dsI<- which( simulations_dsI[,1]%%86400 ==0)
times_deg1<- which( simulations_deg1[,1]%%86400 ==0)
times_deg2<- which( simulations_deg2[,1]%%86400 ==0)
times_deg3<- which( simulations_deg3[,1]%%86400 ==0)
times_deg4<- which( simulations_deg4[,1]%%86400 ==0)
times_IPSL<- which( simulations_IPSL[,1]%%86400 ==0)
indice <- 997*86400/1200 #permettant de passer dans les bonnes unitées
simu_deb<-matrix(0, length(times_ref),11)
simu_deb[,1] <- simulations_ref[times_ref,2]
simu_deb[,2] <- simulations_ds1[times_ds1,2]
simu_deb[,3] <- simulations_ds2[times_ds2,2]
simu_deb[,4] <- simulations_ds3[times_ds3,2]
simu_deb[,5] <- simulations_ds4[times_ds4,2]
simu_deb[,6] <- simulations_dsI[times_dsI,2]
simu_deb[,7]<- simulations_deg1[times_deg1,2]
simu_deb[,8]<- simulations_deg2[times_deg2,2]
simu_deb[,9]<- simulations_deg3[times_deg3,2]
simu_deb[,10]<- simulations_deg4[times_deg4,2]
simu_deb[,11]<- simulations_IPSL[times_IPSL,2]
colnames(simu_deb)<-c("ref", "dwnsc(x9)", "dwnsc(x25)", "dwnsc(x49)", "dwnsc(x81)", "dwnsc IPSL",  "deg(x9)", "deg(x25)", "deg(x49)", "deg(x81)", "IPSL")
simu_etr<-matrix(0, length(times_ref),11)
simu_etr[,1]<-simulations_ref[times_ref,4]
simu_etr[,2]<-simulations_ds1[times_ds1,4]
simu_etr[,3]<-simulations_ds2[times_ds2,4]
simu_etr[,4]<-simulations_ds3[times_ds3,4]
simu_etr[,5]<-simulations_ds4[times_ds4,4]
simu_etr[,6]<-simulations_dsI[times_dsI,4]
simu_etr[,7]<-simulations_deg1[times_deg1,4]
simu_etr[,8]<-simulations_deg2[times_deg2,4]
simu_etr[,9]<-simulations_deg3[times_deg3,4]
simu_etr[,10]<-simulations_deg4[times_deg4,4]
simu_etr[,11]<-simulations_IPSL[times_IPSL,4]
colnames(simu_etr)<-c("ref", "dwnsc(x9)", "dwnsc(x25)", "dwnsc(x49)", "dwnsc(x81)", "dwnsc IPSL",  "deg(x9)", "deg(x25)", "deg(x49)", "deg(x81)", "IPSL")
#Les séries de précipitation et d'ETP
pr_series<-matrix(0, length(times_ref),11)
pr_series[,1] <- -simulations_ref[times_ref,3]
pr_series[,2] <- -simulations_ds1[times_ds1,3]
pr_series[,3] <- -simulations_ds2[times_ds2,3]
pr_series[,4] <- -simulations_ds3[times_ds3,3]
pr_series[,5] <- -simulations_ds4[times_ds4,3]
pr_series[,6] <- -simulations_dsI[times_dsI,3]
pr_series[,7]<- -simulations_deg1[times_deg1,3]
pr_series[,8]<- -simulations_deg2[times_deg2,3]
pr_series[,9]<- -simulations_deg3[times_deg3,3]
pr_series[,10]<--simulations_deg4[times_deg4,3]
pr_series[,11]<--simulations_IPSL[times_IPSL,3]
colnames(pr_series)<-c("ref", "dwnsc(x9)", "dwnsc(x25)", "dwnsc(x49)", "dwnsc(x81)", "dwnsc IPSL",  "deg(x9)", "deg(x25)", "deg(x49)", "deg(x81)", "IPSL")
prr_series<-matrix(0, length(times_ref),11)
prr_series[,1] <- read.csv(paste(loc,"/series/pr_ref.csv", sep=""))[,2]
prr_series[,2] <- read.csv(paste(loc,"/series/pr_ds1.csv", sep=""))[,2]
prr_series[,3] <- read.csv(paste(loc,"/series/pr_ds2.csv", sep=""))[,2]
prr_series[,4] <- read.csv(paste(loc,"/series/pr_ds3.csv", sep=""))[,2]
prr_series[,5] <- read.csv(paste(loc,"/series/pr_ds4.csv", sep=""))[,2]
prr_series[,6] <- read.csv(paste(loc,"/series/pr_dsI.csv", sep=""))[,2]
prr_series[,7]<- read.csv(paste(loc,"/series/pr_deg1.csv", sep=""))[,2]
prr_series[,8]<- read.csv(paste(loc,"/series/pr_deg2.csv", sep=""))[,2]
prr_series[,9]<- read.csv(paste(loc,"/series/pr_deg3.csv", sep=""))[,2]
prr_series[,10]<-read.csv(paste(loc,"/series/pr_deg4.csv", sep=""))[,2]
prr_series[,11]<-read.csv(paste(loc,"/series/pr_IPSL.csv", sep=""))[,2]
colnames(pr_series)<-c("ref", "dwnsc(x9)", "dwnsc(x25)", "dwnsc(x49)", "dwnsc(x81)", "dwnsc IPSL",  "deg(x9)", "deg(x25)", "deg(x49)", "deg(x81)", "IPSL")
#ETP
etp_ds1 <- read.csv("./series/etp_ds1.csv")[,2]
etp_ds2 <- read.csv("./series/etp_ds2.csv")[,2]
etp_ds3 <- read.csv("./series/etp_ds3.csv")[,2]
etp_ds4 <- read.csv("./series/etp_ds4.csv")[,2]
etp_dsI <- read.csv("./series/etp_dsI.csv")[,2]
etp_deg1 <- read.csv(paste(loc,"/series/evap_deg1_1979_2014.csv",sep=""))[proj,2]
etp_deg2 <- read.csv(paste(loc,"/series/evap_deg2_1979_2014.csv",sep=""))[proj,2]
etp_deg3 <- read.csv(paste(loc,"/series/evap_deg3_1979_2014.csv",sep=""))[proj,2]
etp_deg4 <- read.csv(paste(loc,"/series/evap_deg4_1979_2014.csv",sep=""))[proj,2]
etp_ref <- read.csv("./series/evap_ref_1979_2014.csv")[proj,2]
etp_IPSL <- read.csv("./series/IPSL_etp_1979_2014.csv")[proj,]
#ETP
etp_series<-matrix(0, length(etp_ref),11)
etp_series[,1]<-etp_ref
etp_series[,2]<-etp_ds1
etp_series[,3]<-etp_ds2
etp_series[,4]<-etp_ds3
etp_series[,5]<-etp_ds4
etp_series[,6]<-etp_dsI
etp_series[,7]<-etp_deg1
etp_series[,8]<-etp_deg2
etp_series[,9]<-etp_deg3
etp_series[,10]<-etp_deg4
etp_series[,11]<-etp_IPSL
colnames(etp_series)<-c("ref", "dwnsc(x9)", "dwnsc(x25)", "dwnsc(x49)", "dwnsc(x81)", "dwnsc IPSL", "deg(x9)", "deg(x25)", "deg(x49)", "deg(x81)", "IPSL")
#library(ggplot2) #Pour plot les différents graphiques
#On commence par se mettre dans le bon repertoire
WDs<-c("C:/Users/mathisDeronzier/Mathématiques/Stage LSCE downscaling upscaling/stage/NARR datas/R_codes","/home/users/mderon/R_codes")
wd<-WDs[1]
setwd(wd)
#library(ggplot2) #Pour plot les différents graphiques
#On commence par se mettre dans le bon repertoire
WDs<-c("C:/Users/mathisDeronzier/Mathématiques/Stage LSCE downscaling upscaling/stage/NARR datas/R_codes","/home/mathis/stage/R_codes")
wd<-WDs[1]
setwd(wd)
#library(ggplot2) #Pour plot les différents graphiques
#On commence par se mettre dans le bon repertoire
WDs<-c("C:/Users/mathisDeronzier/Mathématiques/Stage LSCE downscaling upscaling/stage/NARR datas/R_codes","/home/users/mderon/R_codes","/home/mathis/stage/R_codes")
wd<-WDs[3]
setwd(wd)
#On set la localisation
localisations<- c(".","/home/hydrogeol2/mderon/NARR_1979_2014")#Les localisations possibles
loc<-localisations[1]
#Importation des fonctions de jours sec et de jours de pluie + RMSE
source(paste(loc,"/codes_utiles/Analysis_functions.R", sep=""))
source(paste(loc,"/codes_utiles/downscaling_application.R", sep=""))
source(paste(loc,"/codes_utiles/downscaling_application2.R", sep=""))
#Importation des fonctions de downscaling utiles
#source(paste(loc,"/ds_fun/CDFt.R", sep=""))
#source(paste(loc,"/ds_fun/SSR_CDFt.R", sep=""))
#source(paste(loc,"/ds_fun/CDFt_norm.R", sep=""))
programmes<- c("CDFt","SSR_CDFt", "CDFt_norm") #Liste des programmes permettant de downscaler
prog<-programmes[1]
D_proj<-TRUE
downscal_appli(loc, prog, D_proj)
DATES <- read.csv(paste(loc,"/series/dates_1979_2014.csv", sep=""))[,(2:4)]
#On fixe les dates de calibration et de projection
if (D_proj){
proj <- which (DATES[,1]>=1996)
}
if(D_proj==FALSE){
proj <- which (DATES[,1]<1996)
}
#PRECIPITATION
pr_ds1 <- read.csv("./series/pr_ds1.csv")[,2]
pr_ds2 <- read.csv("./series/pr_ds2.csv")[,2]
pr_ds3 <- read.csv("./series/pr_ds3.csv")[,2]
pr_ds4 <- read.csv("./series/pr_ds4.csv")[,2]
pr_dsI <- read.csv("./series/pr_dsI.csv")[,2]
pr_deg1 <- read.csv("./series/precp_deg1_1979_2014.csv")[proj,2]
pr_deg2 <- read.csv("./series/precp_deg2_1979_2014.csv")[proj,2]
pr_deg3 <- read.csv("./series/precp_deg3_1979_2014.csv")[proj,2]
pr_deg4 <- read.csv("./series/precp_deg4_1979_2014.csv")[proj,2]
pr_ref <- read.csv("./series/precp_ref_1979_2014.csv")[proj,2]
pr_IPSL <- read.csv("./series/IPSL_pr_1979_2014.csv")[proj,]
#ETP
etp_ds1 <- read.csv("./series/etp_ds1.csv")[,2]
etp_ds2 <- read.csv("./series/etp_ds2.csv")[,2]
etp_ds3 <- read.csv("./series/etp_ds3.csv")[,2]
etp_ds4 <- read.csv("./series/etp_ds4.csv")[,2]
etp_dsI <- read.csv("./series/etp_dsI.csv")[,2]
etp_deg1 <- read.csv(paste(loc,"/series/evap_deg1_1979_2014.csv",sep=""))[proj,2]
etp_deg2 <- read.csv(paste(loc,"/series/evap_deg2_1979_2014.csv",sep=""))[proj,2]
etp_deg3 <- read.csv(paste(loc,"/series/evap_deg3_1979_2014.csv",sep=""))[proj,2]
etp_deg4 <- read.csv(paste(loc,"/series/evap_deg4_1979_2014.csv",sep=""))[proj,2]
etp_ref <- read.csv("./series/evap_ref_1979_2014.csv")[proj,2]
etp_IPSL <- read.csv("./series/IPSL_etp_1979_2014.csv")[proj,]
#On cree la liste de chaque de toutes les series etudiees
#Precipitation
pr_series<-matrix(0, length(pr_ref),11)
pr_series[,1]<-pr_ref
pr_series[,2]<-pr_ds1
pr_series[,3]<-pr_ds2
pr_series[,4]<-pr_ds3
pr_series[,5]<-pr_ds4
pr_series[,6]<-pr_dsI
pr_series[,7]<-pr_deg1
pr_series[,8]<-pr_deg2
pr_series[,9]<-pr_deg3
pr_series[,10]<-pr_deg4
pr_series[,11]<-1e5*pr_IPSL
colnames(pr_series)<-c("ref", "dwnsc(x9)", "dwnsc(x25)", "dwnsc(x49)", "dwnsc(x81)", "dwnsc IPSL",  "deg(x9)", "deg(x25)", "deg(x49)", "deg(x81)", "IPSL")
#ETP
etp_series<-matrix(0, length(pr_ref),11)
etp_series[,1]<-etp_ref
etp_series[,2]<-etp_ds1
etp_series[,3]<-etp_ds2
etp_series[,4]<-etp_ds3
etp_series[,5]<-etp_ds4
etp_series[,6]<-etp_dsI
etp_series[,7]<-etp_deg1
etp_series[,8]<-etp_deg2
etp_series[,9]<-etp_deg3
etp_series[,10]<-etp_deg4
etp_series[,11]<-1e5*etp_IPSL
colnames(etp_series)<-c("ref", "dwnsc(x9)", "dwnsc(x25)", "dwnsc(x49)", "dwnsc(x81)", "dwnsc IPSL", "deg(x9)", "deg(x25)", "deg(x49)", "deg(x81)", "IPSL")
summary(pr_series)
for (decal in -1:3){
if(decal>=0){
points_pr<-((decal+1):n)
points_deb<-(1:(n-decal))
}
else{
points_deb<-((1-decal):n)
points_pr<-(1:(n+decal))
}
#layout(matrix(1:2,1,2))
plot((pr_series[points_pr,2]-pr_series[points_pr,1])/pr_series[points_pr,1],(simu_deb[points_deb,2]-simu_deb[points_deb,1])/simu_deb[points_deb,1], main= paste("delta Q /delta R dwnsc decal=",decal, sep=""), xlab="delta R", ylab="delta Q", xlim = c(-1,10),ylim=c(-1,1))
#abline(0,1,col="red")
#abline(0,0,col="red")
#plot((pr_series[points_pr,2]-pr_series[points_pr,1])/pr_series[points_pr,1],(simu_deb[points_deb,2]-simu_deb[points_deb,1])/simu_deb[points_deb,1], main= paste("delta Q /delta R deg decal=",decal, sep=""), xlab="delta R", ylab="delta Q", xlim = c(-1,1),ylim=c(-1,1))
#abline(0,1,col="red")
#abline(0,0,col="red")
}
install.packages(c("digest", "caTools", "bitops"))
options(repos = c(CRAN="https://cloud.r-project.org"))
install.packages("rmarkdown", dependencies=TRUE)
install.packages("rlang")
install.packages("vctrs")
install.packages("labbelled")
install.packages("markedown")
install.packages("rmarkdown", dependencies=TRUE)
#library(ggplot2) #Pour plot les différents graphiques
#On commence par se mettre dans le bon repertoire
WDs<-c("C:/Users/mathisDeronzier/Mathématiques/Stage LSCE downscaling upscaling/stage/NARR datas/R_codes","/home/users/mderon/R_codes","/home/mathis/stage/py_codes","/home/mathis/stage/R_codes")
wd<-WDs[3]
setwd(wd)
#On set la localisation
localisations<- c(".","/home/hydrogeol2/mderon/NARR_1979_2014")#Les localisations possibles
loc<-localisations[1]
#Importation des fonctions de jours sec et de jours de pluie + RMSE
source(paste(loc,"/codes_utiles/Analysis_functions.R", sep=""))
setwd("~/stage/R_codes")
#Importation des fonctions de jours sec et de jours de pluie + RMSE
source(paste(loc,"/codes_utiles/Analysis_functions.R", sep=""))
source(paste(loc,"/codes_utiles/downscaling_application.R", sep=""))
source(paste(loc,"/codes_utiles/downscaling_application2.R", sep=""))
pr_series <- read.csv("./series/pr_ds_py.csv")[,2]
summary(pr_series)
pr_series <- read.csv("./series/pr_ds_py.csv")
etp_series <- read.csv("./series/etp_ds_py.csv")[,2]
DATES <- read.csv(paste(loc,"/series/dates_1979_2014.csv", sep=""))[,(2:4)]
#On fixe les dates de calibration et de projection
if (D_proj){
proj <- which (DATES[,1]>=1996)
}
pr_series <- read.csv("./series/pr_ds_py.csv")
summary(pr_series)
pr_series <- read.csv("./series/pr_ds_py.csv",header = FALSE, index=FALSE)
pr_series <- read.csv("./series/pr_ds_py.csv",header = FALSE)
etp_series <- read.csv("./series/etp_ds_py.csv",header = FALSE)
DATES <- read.csv(paste(loc,"/series/dates_1979_2014.csv", sep=""))[,(2:4)]
colnames(pr_series)<-c("ref", "dwnsc(x9)", "dwnsc(x25)", "dwnsc(x49)", "dwnsc(x81)", "dwnsc IPSL", "deg(x9)", "deg(x25)", "deg(x49)", "deg(x81)", "IPSL")
colnames(etp_series)<-c("ref", "dwnsc(x9)", "dwnsc(x25)", "dwnsc(x49)", "dwnsc(x81)", "dwnsc IPSL", "deg(x9)", "deg(x25)", "deg(x49)", "deg(x81)", "IPSL")
summary(pr_series)
pr_series <- read.csv("./series/pr_ds_py.csv",header = FALSE)
etp_series <- read.csv("./series/etp_ds_py.csv",header = FALSE)
DATES <- read.csv(paste(loc,"/series/dates_1979_2014.csv", sep=""))[,(2:4)]
colnames(pr_series)<-c("ref", "dwnsc(x9)", "dwnsc(x25)", "dwnsc(x49)", "dwnsc(x81)", "dwnsc IPSL", "deg(x9)", "deg(x25)", "deg(x49)", "deg(x81)", "IPSL")
colnames(etp_series)<-c("ref", "dwnsc(x9)", "dwnsc(x25)", "dwnsc(x49)", "dwnsc(x81)", "dwnsc IPSL", "deg(x9)", "deg(x25)", "deg(x49)", "deg(x81)", "IPSL")
summary(pr_series)
pr_series <- read.csv("./series/pr_ds_py.csv",header = FALSE)
etp_series <- read.csv("./series/etp_ds_py.csv",header = FALSE)
DATES <- read.csv(paste(loc,"/series/dates_1979_2014.csv", sep=""))[,(2:4)]
colnames(pr_series)<-c("ref", "dwnsc(x9)", "dwnsc(x25)", "dwnsc(x49)", "dwnsc(x81)", "dwnsc IPSL", "deg(x9)", "deg(x25)", "deg(x49)", "deg(x81)", "IPSL")
colnames(etp_series)<-c("ref", "dwnsc(x9)", "dwnsc(x25)", "dwnsc(x49)", "dwnsc(x81)", "dwnsc IPSL", "deg(x9)", "deg(x25)", "deg(x49)", "deg(x81)", "IPSL")
summary(pr_series)
#Tracé des précipitations
for (i in 2:5){
plot(pr_series[which(pr_series[,1]<12),1],pr_series[which(pr_series[,1]<12),i+5], ylab=paste("serie dwnsc(x",(2*i-1)^2,")",sep=""), xlab=" serie ref")
abline(0,1)
mod<-lm(pr_series[which(pr_series[,1]<12),1]~pr_series[which(pr_series[,1]<12),i+5])
abline(mod$coeff[1], mod$coeff[2], col="red")
}
for (i in 2:6){
plot(pr_series[(170:220),i], type = "l", col= "blue", main= paste("serie dwnsc/serie deg (x",(2*i-1)^2,")",sep=""), ylab="kg/m^2")
lines(pr_series[(170:220),i+5], col="red")
}
plot(pr_series[(170:220),6], type = "l", col= "blue", main= paste("serie dwnsc/serie deg IPSL"), ylab="kg/m^2")
lines(pr_series[(170:220),11], col="red")
