lines(cdf_pr_series_deg(x), col = "red")
}
}
cdf_etp_series_ref<-ecdf(etp_series[,1])
for (i in 2:6){
if (i<6){
maxi<-max(etp_series[,1],etp_series[,i], etp_series[,i+5], na.rm = TRUE)
x<-seq(0,maxi,,400)
plot(cdf_etp_series_ref(x), main= paste("CDF etp serie dwnsc(blue) / deg(red) (x",(2*i-1)^2,")",sep=""), col="black",type="l")
cdf_etp_series_dwnsc<-ecdf(etp_series[,i])
lines(cdf_etp_series_dwnsc(x),col="blue")
cdf_etp_series_deg<-ecdf(etp_series[,i+5])
lines(cdf_etp_series_deg(x), col = "red")
}
else{
maxi<-max(etp_series[,1],etp_series[,i], etp_series[,i+5], na.rm = TRUE)
x<-seq(0,maxi,,400)
plot(cdf_etp_series_ref(x), main= "CDF etp serie dwnsc(blue) / deg(red) IPSL", col="black",type="l")
cdf_etp_series_dwnsc<-ecdf(etp_series[,i])
lines(cdf_etp_series_dwnsc(x),col="blue")
cdf_etp_series_deg<-ecdf(etp_series[,i+5])
lines(cdf_etp_series_deg(x), col = "red")
}
}
#On va regarder la norme (RMSE)
fun_pr<-function(serie) sqrt(mean((serie-pr_series[,1])^2))
fun_etp<-function(serie) sqrt(mean((serie-etp_series[,1])^2))
pr_RMSE_dwnsc <- apply(pr_series[,(1:5)] ,2,fun_pr)
pr_RMSE_deg <- apply(pr_series[,c(1,7,8,9,10)] ,2,fun_pr)
etp_RMSE_dwnsc <- apply(etp_series[,(1:5)] ,2,fun_etp)
etp_RMSE_deg <- apply(etp_series[,c(1,7,8,9,10)] ,2,fun_etp)
plot(c(1,9,25,49,81),pr_RMSE_dwnsc, type="o", main="RMSE prec dwnsc(blue)/deg(red)", ylab = "RMSE", xlab= "degradation", col="blue")
lines(c(1,9,25,49,81),pr_RMSE_deg, type="o", col= "red")
#dev.print(device = png, file = paste("C:/Users/mathisDeronzier/Mathématiques/Stage LSCE downscaling upscaling/latex/images/RMSE_precip.png"), width = 600)
plot(c(1,9,25,49,81),etp_RMSE_dwnsc, type="o", main="RMSE evap dwnsc(blue)/deg(red)", ylab = "RMSE", xlab= "degradation", col="blue")
lines(c(1,9,25,49,81),etp_RMSE_deg, type="o", col= "red")
#dev.print(device = png, file = paste("C:/Users/mathisDeronzier/Mathématiques/Stage LSCE downscaling upscaling/latex/images/RMSE_evap.png"), width = 600)
#On va faire un boxplot()
boxplot(pr_series, main = "boxplot precipitations", xlab="degradation")
#dev.print(device = png, file = paste("C:/Users/mathisDeronzier/Mathématiques/Stage LSCE downscaling upscaling/latex/images/boxplot_precip.png"), width = 600)
boxplot(etp_series, main = "boxplot etp",xlab="degradation")
#dev.print(device = png, file = paste("C:/Users/mathisDeronzier/Mathématiques/Stage LSCE downscaling upscaling/latex/images/boxplot_evap.png"), width = 600)
#On veut aussi comparer les quantiles
N=500
Quant<-function(serie){return(quantile(serie,probs=seq(0,1,length.out=N)))}
Quantile_pr_series<-apply(pr_series,2,Quant)
Quantile_etp_series<-apply(etp_series,2,Quant)
for (i in (2:6)){
if (i<6){
plot(Quantile_pr_series[,1], Quantile_pr_series[,i], main = paste("tracé Q-Q precip dwnsc/deg (x",(2*(i-1)+1)^2,")",sep=""), xlab = "quantiles série ref", ylab="quantiles série dwnsc", type="l", col="blue")
lines(Quantile_pr_series[,1], Quantile_pr_series[,i+5], col="red")
abline(0,1)
}
else{
plot(Quantile_pr_series[,1], Quantile_pr_series[,i],main= "tracé Q-Q precip dwnsc IPSL", xlab = "quantiles série ref", ylab="quantiles série dwnsc", type="l", col="blue")
lines(Quantile_pr_series[,1], Quantile_pr_series[,i+5], col="red")
abline(0,1)
}
}
# on va regarder l'autocorrelation sur 10 jours
T=10
delta_t<-(1:(T+1))
ACF_series<-function(serie){return(acf(serie,type="correlation",lag.max=T,plot=FALSE)$acf)}
#Cacul de l'ACF pour les differentes series
ACF_pr_series<- apply(pr_series,2,ACF_series)
ACF_etp_series<-apply(etp_series,2,ACF_series)
#Données des ordonnées
layout(matrix(1:4,2,2))
for (i in 2:6){
plot(x=delta_t, y=(ACF_pr_series[,i]-ACF_pr_series[,1])/ACF_pr_series[,1], xlab="delta_t", ylab="diff correlation", type="h",col="black", main=paste("ACF serie  dwnsc(x",(2*(i-1)+1)^2,")",sep=""))
}
for (i in 6:9){
plot(x=delta_t, y=(ACF_pr_series[,i]-ACF_pr_series[,1])/ACF_pr_series[,1], xlab="delta_t", ylab="diff correlation", type="h",col="black", main=paste("ACF serie  deg(x",(2*(i-5)+1)^2,")",sep=""))
}
layout(matrix(1:4,2,2))
for (i in 2:5){
plot(x=delta_t, y=(ACF_etp_series[,i]-ACF_etp_series[,1])/ACF_etp_series[,1], xlab="delta_t", ylab="diff correlation", type="h",col="black", main=paste("ACF serie  deg (x",(2*(i-1)+1)^2,")",sep=""))
}
layout(matrix(1:4,2,2))
for (i in 6:9){
plot(x=delta_t, y=(ACF_etp_series[,i]-ACF_etp_series[,1])/ACF_etp_series[,1], xlab="delta_t", ylab="diff correlation", type="h",col="black", main=paste("ACF serie  deg (x",(2*(i-5)+1)^2,")",sep=""))
}
#On commence par afficher les fonctions de répartition empiriques
range_pr <- range(pr_series[,2])
range_etp <- range(etp_series[,2])
CDF_pr_series <- apply(pr_series, 2, ecdf)
CDF_etp_series <- apply(etp_series, 2, ecdf)
x<-seq(range_pr[1],range_pr[2],length.out=200)
colors<-rainbow(10)
#On va afficher toutes les fonctions de répartition sur un même graphique.
plot(x,CDF_pr_series$ref(x),xlab="x = Qtte precip", ylab="y = F_X", type="l",col="blue", main= "Fonctions de distributions")
for (i in 2:6){
eval(parse(text=paste("y <- CDF_pr_series[[",i,"]]","(x)",sep="")))
lines(x,y, col = colors[i-1])
}
plot(x,CDF_pr_series$ref(x),xlab="x = Qtte precip", ylab="y = F_X", type="l",col="blue", main= "Fonctions de distributions")
for (i in 7:11){
eval(parse(text=paste("y <- CDF_pr_series[[",i,"]]","(x)",sep="")))
lines(x,y, col = colors[i-5])
}
layout(matrix(1:2,1,2))
plot(x,CDF_etp_series$ref(x),xlab="x = Qtte precip", ylab="y = F_X", type="l",col="blue", main= "Fonctions de distributions")
for (i in 2:5){
eval(parse(text=paste("y <- CDF_etp_series[[",i,"]]","(x)",sep="")))
lines(x,y, col = colors[i-1])
}
plot(x,CDF_etp_series$ref(x),xlab="x = Qtte precip", ylab="y = F_X", type="l",col="blue", main= "Fonctions de distributions")
for (i in 6:9){
eval(parse(text=paste("y <- CDF_etp_series[[",i,"]]","(x)",sep="")))
lines(x,y, col = colors[i-5])
}
source(paste(loc,"/codes_utiles/test_stat_Cramer_von_Mises.R",sep=""))
install.packages('goftest')
library(goftest)
source(paste(loc,"/codes_utiles/test_stat_Cramer_von_Mises.R",sep=""))
#library(ggplot2) #Pour plot les différents graphiques
#On commence par se mettre dans le bon repertoire
WDs<-c("C:/Users/mathisDeronzier/Mathématiques/Stage LSCE downscaling upscaling/stage/NARR datas/R_codes","/home/users/mderon/R_codes","/home/mathis/stage/py_codes","/home/mathis/stage/R_codes")
wd<-WDs[4]
setwd(wd)
#On set la localisation
localisations<- c(".","/home/hydrogeol2/mderon/NARR_1979_2014")#Les localisations possibles
loc<-localisations[1]
#Importation des fonctions de jours sec et de jours de pluie + RMSE
source(paste(loc,"/codes_utiles/Analysis_functions.R", sep=""))
source(paste(loc,"/codes_utiles/downscaling_application.R", sep=""))
source(paste(loc,"/codes_utiles/downscaling_application2.R", sep=""))
#Importation des fonctions de downscaling utiles
#source(paste(loc,"/ds_fun/CDFt.R", sep=""))
#source(paste(loc,"/ds_fun/SSR_CDFt.R", sep=""))
#source(paste(loc,"/ds_fun/CDFt_norm.R", sep=""))
programmes<- c("CDFt","SSR_CDFt", "CDFt_norm") #Liste des programmes permettant de downscaler
prog<-programmes[2]
D_proj<-FALSE
downscal_appli(loc, prog, D_proj)
setwd("~/stage/R_codes")
D_proj<-TRUE
DATES <- read.csv(paste(loc,"/series/dates_1979_2014.csv", sep=""))[,(2:4)]
#library(ggplot2) #Pour plot les différents graphiques
#On commence par se mettre dans le bon repertoire
WDs<-c("C:/Users/mathisDeronzier/Mathématiques/Stage LSCE downscaling upscaling/stage/NARR datas/R_codes","/home/users/mderon/R_codes","/home/mathis/stage/py_codes","/home/mathis/stage/R_codes")
wd<-WDs[4]
setwd(wd)
#On set la localisation
localisations<- c(".","/home/hydrogeol2/mderon/NARR_1979_2014")#Les localisations possibles
loc<-localisations[1]
#Importation des fonctions de jours sec et de jours de pluie + RMSE
source(paste(loc,"/codes_utiles/Analysis_functions.R", sep=""))
source(paste(loc,"/codes_utiles/downscaling_application.R", sep=""))
source(paste(loc,"/codes_utiles/downscaling_application2.R", sep=""))
#Importation des fonctions de downscaling utiles
#source(paste(loc,"/ds_fun/CDFt.R", sep=""))
#source(paste(loc,"/ds_fun/SSR_CDFt.R", sep=""))
#source(paste(loc,"/ds_fun/CDFt_norm.R", sep=""))
D_proj<-TRUE
DATES <- read.csv(paste(loc,"/series/dates_1979_2014.csv", sep=""))[,(2:4)]
setwd("~/stage/R_codes")
D_proj<-TRUE
DATES <- read.csv(paste(loc,"/series/dates_1979_2014.csv", sep=""))[,(2:4)]
#library(ggplot2) #Pour plot les différents graphiques
#On commence par se mettre dans le bon repertoire
WDs<-c("C:/Users/mathisDeronzier/Mathématiques/Stage LSCE downscaling upscaling/stage/NARR datas/R_codes","/home/users/mderon/R_codes","/home/mathis/stage/py_codes","/home/mathis/stage/R_codes")
wd<-WDs[4]
setwd(wd)
#On set la localisation
localisations<- c(".","/home/hydrogeol2/mderon/NARR_1979_2014")#Les localisations possibles
loc<-localisations[1]
#Importation des fonctions de jours sec et de jours de pluie + RMSE
source(paste(loc,"/codes_utiles/Analysis_functions.R", sep=""))
source(paste(loc,"/codes_utiles/downscaling_application.R", sep=""))
source(paste(loc,"/codes_utiles/downscaling_application2.R", sep=""))
D_proj<-TRUE
DATES <- read.csv(paste(loc,"/series/dates_1979_2014.csv", sep=""))[,(2:4)]
#On fixe les dates de calibration et de projection
if (D_proj){
proj <- which (DATES[,1]>=1996)
}
if(D_proj==FALSE){
proj <- which (DATES[,1]<1996)
}
pr_series <- read.csv("./series/pr_ds_py.csv",header = FALSE)
etp_series <- read.csv("./series/etp_ds_py.csv",header = FALSE)
pr_series[,11]<-read.csv(paste(loc,"/series/IPSL_pr_1979_2014.csv",sep=""))[proj,]
pr_series[,6]<- read.csv(paste(loc,"/series/pr_dsI.csv",sep = ""))[,2]
etp_series[,11]<- read.csv(paste(loc,"/series/IPSL_etp_1979_2014.csv",sep=""))[proj,]
etp_series[,6]<- read.csv(paste(loc,"/series/etp_dsI.csv",sep=""))[,2]
colnames(pr_series)<-c("ref", "dwnsc(x9)", "dwnsc(x25)", "dwnsc(x49)", "dwnsc(x81)", "dwnsc IPSL", "deg(x9)", "deg(x25)", "deg(x49)", "deg(x81)", "IPSL")
colnames(etp_series)<-c("ref", "dwnsc(x9)", "dwnsc(x25)", "dwnsc(x49)", "dwnsc(x81)", "dwnsc IPSL", "deg(x9)", "deg(x25)", "deg(x49)", "deg(x81)", "IPSL")
DATES <- read.csv("./series/dates_1979_2014.csv")[,(2:4)]
setwd("~/stage/R_codes/series")
DATES <- read.csv("dates_1979_2014.csv")[,(2:4)]
DATES <- read.csv("dates_1979_2014.csv")[,(2:4)]
#On fixe les dates de calibration et de projection
if (D_proj){
proj <- which (DATES[,1]>=1996)
}
if(D_proj==FALSE){
proj <- which (DATES[,1]<1996)
}
#PRECIPITATION
pr_ds1 <- read.csv("./series/pr_ds1.csv")[,2]
pr_ds2 <- read.csv("./series/pr_ds2.csv")[,2]
pr_ds3 <- read.csv("./series/pr_ds3.csv")[,2]
pr_ds4 <- read.csv("./series/pr_ds4.csv")[,2]
#library(ggplot2) #Pour plot les différents graphiques
#On commence par se mettre dans le bon repertoire
WDs<-c("C:/Users/mathisDeronzier/Mathématiques/Stage LSCE downscaling upscaling/stage/NARR datas/R_codes","/home/users/mderon/R_codes","/home/mathis/stage/py_codes","/home/mathis/stage/R_codes")
wd<-WDs[4]
setwd(wd)
#On set la localisation
localisations<- c(".","/home/hydrogeol2/mderon/NARR_1979_2014")#Les localisations possibles
loc<-localisations[1]
#Importation des fonctions de jours sec et de jours de pluie + RMSE
source(paste(loc,"/codes_utiles/Analysis_functions.R", sep=""))
source(paste(loc,"/codes_utiles/downscaling_application.R", sep=""))
source(paste(loc,"/codes_utiles/downscaling_application2.R", sep=""))
#Importation des fonctions de downscaling utiles
#source(paste(loc,"/ds_fun/CDFt.R", sep=""))
#source(paste(loc,"/ds_fun/SSR_CDFt.R", sep=""))
#source(paste(loc,"/ds_fun/CDFt_norm.R", sep=""))
#PRECIPITATION
pr_ds1 <- read.csv("./series/pr_ds1.csv")[,2]
#library(ggplot2) #Pour plot les différents graphiques
#On commence par se mettre dans le bon repertoire
WDs<-c("C:/Users/mathisDeronzier/Mathématiques/Stage LSCE downscaling upscaling/stage/NARR datas/R_codes","/home/users/mderon/R_codes","/home/mathis/stage/py_codes","/home/mathis/stage/R_codes")
wd<-WDs[4]
setwd(wd)
#On set la localisation
localisations<- c(".","/home/hydrogeol2/mderon/NARR_1979_2014")#Les localisations possibles
loc<-localisations[1]
#Importation des fonctions de jours sec et de jours de pluie + RMSE
source(paste(loc,"/codes_utiles/Analysis_functions.R", sep=""))
source(paste(loc,"/codes_utiles/downscaling_application.R", sep=""))
source(paste(loc,"/codes_utiles/downscaling_application2.R", sep=""))
D_proj<-TRUE
DATES <- read.csv(paste(loc,"/series/dates_1979_2014.csv", sep=""))[,(2:4)]
#On fixe les dates de calibration et de projection
if (D_proj){
proj <- which (DATES[,1]>=1996)
}
if(D_proj==FALSE){
proj <- which (DATES[,1]<1996)
}
#PRECIPITATION
pr_ds1 <- read.csv("./series/pr_ds1.csv")[,2]
pr_ds2 <- read.csv("./series/pr_ds2.csv")[,2]
pr_ds3 <- read.csv("./series/pr_ds3.csv")[,2]
pr_ds4 <- read.csv("./series/pr_ds4.csv")[,2]
pr_dsI <- read.csv("./series/pr_dsI.csv")[,2]
pr_deg1 <- read.csv("./series/precp_deg1_1979_2014.csv")[proj,2]
pr_deg2 <- read.csv("./series/precp_deg2_1979_2014.csv")[proj,2]
pr_deg3 <- read.csv("./series/precp_deg3_1979_2014.csv")[proj,2]
pr_deg4 <- read.csv("./series/precp_deg4_1979_2014.csv")[proj,2]
pr_ref <- read.csv("./series/precp_ref_1979_2014.csv")[proj,2]
pr_IPSL <- read.csv("./series/IPSL_pr_1979_2014.csv")[proj,]
#ETP
etp_ds1 <- read.csv("./series/etp_ds1.csv")[,2]
etp_ds2 <- read.csv("./series/etp_ds2.csv")[,2]
etp_ds3 <- read.csv("./series/etp_ds3.csv")[,2]
etp_ds4 <- read.csv("./series/etp_ds4.csv")[,2]
etp_dsI <- read.csv("./series/etp_dsI.csv")[,2]
etp_deg1 <- read.csv(paste(loc,"/series/evap_deg1_1979_2014.csv",sep=""))[proj,2]
etp_deg2 <- read.csv(paste(loc,"/series/evap_deg2_1979_2014.csv",sep=""))[proj,2]
etp_deg3 <- read.csv(paste(loc,"/series/evap_deg3_1979_2014.csv",sep=""))[proj,2]
etp_deg4 <- read.csv(paste(loc,"/series/evap_deg4_1979_2014.csv",sep=""))[proj,2]
etp_ref <- read.csv("./series/evap_ref_1979_2014.csv")[proj,2]
etp_IPSL <- read.csv("./series/IPSL_etp_1979_2014.csv")[proj,]
#On cree la liste de chaque de toutes les series etudiees
#Precipitation
pr_series<-matrix(0, length(pr_ref),11)
pr_series[,1]<-pr_ref
pr_series[,2]<-pr_ds1
pr_series[,3]<-pr_ds2
pr_series[,4]<-pr_ds3
pr_series[,5]<-pr_ds4
pr_series[,6]<-pr_dsI
pr_series[,7]<-pr_deg1
pr_series[,8]<-pr_deg2
pr_series[,9]<-pr_deg3
pr_series[,10]<-pr_deg4
pr_series[,11]<-1e5*pr_IPSL
colnames(pr_series)<-c("ref", "ds(x9)", "ds(x25)", "ds(x49)", "ds(x81)", "ds IPSL",  "deg(x9)", "deg(x25)", "deg(x49)", "deg(x81)", "IPSL")
#ETP
etp_series<-matrix(0, length(pr_ref),11)
etp_series[,1]<-etp_ref
etp_series[,2]<-etp_ds1
etp_series[,3]<-etp_ds2
etp_series[,4]<-etp_ds3
etp_series[,5]<-etp_ds4
etp_series[,6]<-etp_dsI
etp_series[,7]<-etp_deg1
etp_series[,8]<-etp_deg2
etp_series[,9]<-etp_deg3
etp_series[,10]<-etp_deg4
etp_series[,11]<-1e5*etp_IPSL
colnames(etp_series)<-c("ref", "ds(x9)", "ds(x25)", "ds(x49)", "ds(x81)", "ds IPSL", "deg(x9)", "deg(x25)", "deg(x49)", "deg(x81)", "IPSL")
```{r}
summary(pr_series)
```
summary(pr_series)
summary(etp_series)
downscal_appli(loc, prog, D_proj)
#PRECIPITATION
pr_ds1 <- read.csv("./series/pr_ds1.csv")[,2]
pr_ds2 <- read.csv("./series/pr_ds2.csv")[,2]
pr_ds3 <- read.csv("./series/pr_ds3.csv")[,2]
pr_ds4 <- read.csv("./series/pr_ds4.csv")[,2]
pr_dsI <- read.csv("./series/pr_dsI.csv")[,2]
pr_deg1 <- read.csv("./series/precp_deg1_1979_2014.csv")[proj,2]
pr_deg2 <- read.csv("./series/precp_deg2_1979_2014.csv")[proj,2]
pr_deg3 <- read.csv("./series/precp_deg3_1979_2014.csv")[proj,2]
pr_deg4 <- read.csv("./series/precp_deg4_1979_2014.csv")[proj,2]
pr_ref <- read.csv("./series/precp_ref_1979_2014.csv")[proj,2]
pr_IPSL <- read.csv("./series/IPSL_pr_1979_2014.csv")[proj,]
#ETP
etp_ds1 <- read.csv("./series/etp_ds1.csv")[,2]
etp_ds2 <- read.csv("./series/etp_ds2.csv")[,2]
etp_ds3 <- read.csv("./series/etp_ds3.csv")[,2]
etp_ds4 <- read.csv("./series/etp_ds4.csv")[,2]
etp_dsI <- read.csv("./series/etp_dsI.csv")[,2]
etp_deg1 <- read.csv(paste(loc,"/series/evap_deg1_1979_2014.csv",sep=""))[proj,2]
etp_deg2 <- read.csv(paste(loc,"/series/evap_deg2_1979_2014.csv",sep=""))[proj,2]
etp_deg3 <- read.csv(paste(loc,"/series/evap_deg3_1979_2014.csv",sep=""))[proj,2]
etp_deg4 <- read.csv(paste(loc,"/series/evap_deg4_1979_2014.csv",sep=""))[proj,2]
etp_ref <- read.csv("./series/evap_ref_1979_2014.csv")[proj,2]
etp_IPSL <- read.csv("./series/IPSL_etp_1979_2014.csv")[proj,]
#On cree la liste de chaque de toutes les series etudiees
#Precipitation
pr_series<-matrix(0, length(pr_ref),11)
pr_series[,1]<-pr_ref
pr_series[,2]<-pr_ds1
pr_series[,3]<-pr_ds2
pr_series[,4]<-pr_ds3
pr_series[,5]<-pr_ds4
pr_series[,6]<-pr_dsI
pr_series[,7]<-pr_deg1
pr_series[,8]<-pr_deg2
pr_series[,9]<-pr_deg3
pr_series[,10]<-pr_deg4
pr_series[,11]<-1e5*pr_IPSL
colnames(pr_series)<-c("ref", "ds(x9)", "ds(x25)", "ds(x49)", "ds(x81)", "ds IPSL",  "deg(x9)", "deg(x25)", "deg(x49)", "deg(x81)", "IPSL")
#ETP
etp_series<-matrix(0, length(pr_ref),11)
etp_series[,1]<-etp_ref
etp_series[,2]<-etp_ds1
etp_series[,3]<-etp_ds2
etp_series[,4]<-etp_ds3
etp_series[,5]<-etp_ds4
etp_series[,6]<-etp_dsI
etp_series[,7]<-etp_deg1
etp_series[,8]<-etp_deg2
etp_series[,9]<-etp_deg3
etp_series[,10]<-etp_deg4
etp_series[,11]<-1e5*etp_IPSL
colnames(etp_series)<-c("ref", "ds(x9)", "ds(x25)", "ds(x49)", "ds(x81)", "ds IPSL", "deg(x9)", "deg(x25)", "deg(x49)", "deg(x81)", "IPSL")
summary(pr_series)
summary(etp_series)
#Tracé des précipitations
nb_j<-c(31,28,31,30,31,30,31,31,30,31,30,31)
time<-(365+180:365+230)
#bounds<-100
#points <- which(pr_series[,1]<bounds)
for (i in 2:5){
plot(pr_series[,1],pr_series[,i], ylab=paste("serie dwnsc(x",(2*i-1)^2,")",sep=""), xlab=" serie ref", main= paste("tracé précip dwnsc/ précip ref (x",(2*i-1)^2,")", sep=""), xlim=c(0,80), ylim=c(0,80))
abline(0,1)
mod<-lm(pr_series[,i]~pr_series[,1])
abline(mod$coeff[1], mod$coeff[2], col="red")
#dev.print(device = png, file = paste("C:/Users/mathisDeronzier/Mathématiques/Stage LSCE downscaling upscaling/latex/images/pr_",i-1,"_ds.png"), width = 600)
}
for (i in 2:5){
plot(pr_series[,1],pr_series[,i+5], ylab=paste("serie deg(x",(2*i-1)^2,")",sep=""), xlab=" serie ref", main= paste("tracé précip deg/ précip ref (x",(2*i-1)^2,")",sep=""), xlim=c(0,80), ylim=c(0,80))
abline(0,1)
mod<-lm(pr_series[,i+5]~pr_series[,1])
abline(mod$coeff[1], mod$coeff[2], col="red")
#dev.print(device = png, file = paste("C:/Users/mathisDeronzier/Mathématiques/Stage LSCE downscaling upscaling/latex/images/pr_",i-1,"_dg.png"), width = 600)
}
for (i in 2:5){
plot(pr_series[time,i], type = "l", col= "blue", main= paste("serie precip dwnsc/serie deg (x",(2*i-1)^2,")",sep=""), ylab="kg/m^2")
lines(pr_series[time,i+5], col="red")
lines(pr_series[time,1],col="black")
}
#plot(pr_series[time,6], type = "l", col= "blue", main= paste("serie dwnsc/serie deg IPSL"), ylab="kg/m^2")
#lines(pr_series[time,11], col="red")
#lines(pr_series[time,1],col="black")
#Tracé des evapotranspirations
nb_j<-c(31,28,31,30,31,30,31,31,30,31,30,31)
time<-(365+180:365+210)
for (i in 2:5){
plot(etp_series[which(pr_series[,1]<12),1],etp_series[which(pr_series[,1]<12),i+5], ylab=paste("serie dwnsc(x",(2*i-1)^2,")",sep=""), xlab=" serie ref")
abline(0,1)
mod<-lm(etp_series[,1]~etp_series[,i+5])
abline(mod$coeff[1], mod$coeff[2], col="red")
}
for (i in 2:5){
plot(etp_series[time,i], type = "l", col= "blue", main= paste("serie etp dwnsc/serie deg (x",(2*i-1)^2,")",sep=""), ylab="kg/m^2")
lines(etp_series[time,i+5], col="red")
lines(etp_series[time,1],col="black")
}
cdf_pr_series_ref<-ecdf(pr_series[,1])
for (i in 2:6){
if (i<6){
maxi<-max(pr_series[,1],pr_series[,i], pr_series[,i+5], na.rm = TRUE)
x<-seq(0,maxi,,400)
plot(cdf_pr_series_ref(x), main= paste("CDF pr serie dwnsc(blue) / deg(red) (x",(2*i-1)^2,")",sep=""), col="black",type="l")
cdf_pr_series_dwnsc<-ecdf(pr_series[,i])
lines(cdf_pr_series_dwnsc(x),col="blue")
cdf_pr_series_deg<-ecdf(pr_series[,i+4])
lines(cdf_pr_series_deg(x), col = "red")
}
else{
maxi<-max(pr_series[,1],pr_series[,i], pr_series[,i+5], na.rm = TRUE)
x<-seq(0,maxi,,400)
plot(cdf_pr_series_ref(x), main= "CDF pr serie dwnsc(blue) / deg(red) IPSL", col="black",type="l")
cdf_pr_series_dwnsc<-ecdf(pr_series[,i])
lines(cdf_pr_series_dwnsc(x),col="blue")
cdf_pr_series_deg<-ecdf(pr_series[,i+4])
lines(cdf_pr_series_deg(x), col = "red")
}
}
cdf_etp_series_ref<-ecdf(etp_series[,1])
for (i in 2:6){
if (i<6){
maxi<-max(etp_series[,1],etp_series[,i], etp_series[,i+5], na.rm = TRUE)
x<-seq(0,maxi,,400)
plot(cdf_etp_series_ref(x), main= paste("CDF etp serie dwnsc(blue) / deg(red) (x",(2*i-1)^2,")",sep=""), col="black",type="l")
cdf_etp_series_dwnsc<-ecdf(etp_series[,i])
lines(cdf_etp_series_dwnsc(x),col="blue")
cdf_etp_series_deg<-ecdf(etp_series[,i+5])
lines(cdf_etp_series_deg(x), col = "red")
}
else{
maxi<-max(etp_series[,1],etp_series[,i], etp_series[,i+5], na.rm = TRUE)
x<-seq(0,maxi,,400)
plot(cdf_etp_series_ref(x), main= "CDF etp serie dwnsc(blue) / deg(red) IPSL", col="black",type="l")
cdf_etp_series_dwnsc<-ecdf(etp_series[,i])
lines(cdf_etp_series_dwnsc(x),col="blue")
cdf_etp_series_deg<-ecdf(etp_series[,i+5])
lines(cdf_etp_series_deg(x), col = "red")
}
}
#On va regarder la norme (RMSE)
fun_pr<-function(serie) sqrt(mean((serie-pr_series[,1])^2))
fun_etp<-function(serie) sqrt(mean((serie-etp_series[,1])^2))
pr_RMSE_dwnsc <- apply(pr_series[,(1:5)] ,2,fun_pr)
pr_RMSE_deg <- apply(pr_series[,c(1,7,8,9,10)] ,2,fun_pr)
etp_RMSE_dwnsc <- apply(etp_series[,(1:5)] ,2,fun_etp)
etp_RMSE_deg <- apply(etp_series[,c(1,7,8,9,10)] ,2,fun_etp)
plot(c(1,9,25,49,81),pr_RMSE_dwnsc, type="o", main="RMSE prec dwnsc(blue)/deg(red)", ylab = "RMSE", xlab= "degradation", col="blue")
lines(c(1,9,25,49,81),pr_RMSE_deg, type="o", col= "red")
#dev.print(device = png, file = paste("C:/Users/mathisDeronzier/Mathématiques/Stage LSCE downscaling upscaling/latex/images/RMSE_precip.png"), width = 600)
plot(c(1,9,25,49,81),etp_RMSE_dwnsc, type="o", main="RMSE evap dwnsc(blue)/deg(red)", ylab = "RMSE", xlab= "degradation", col="blue")
lines(c(1,9,25,49,81),etp_RMSE_deg, type="o", col= "red")
#dev.print(device = png, file = paste("C:/Users/mathisDeronzier/Mathématiques/Stage LSCE downscaling upscaling/latex/images/RMSE_evap.png"), width = 600)
#On va regarder la norme (RMSE)
fun_pr<-function(serie) sqrt(mean((serie-pr_series[,1])^2))
fun_etp<-function(serie) sqrt(mean((serie-etp_series[,1])^2))
pr_RMSE_dwnsc <- apply(pr_series[,(1:5)] ,2,fun_pr)
pr_RMSE_deg <- apply(pr_series[,c(1,7,8,9,10)] ,2,fun_pr)
etp_RMSE_dwnsc <- apply(etp_series[,(1:5)] ,2,fun_etp)
etp_RMSE_deg <- apply(etp_series[,c(1,7,8,9,10)] ,2,fun_etp)
plot(c(1,9,25,49,81),pr_RMSE_dwnsc, type="o", main="RMSE prec dwnsc(blue)/deg(red)", ylab = "RMSE", xlab= "degradation", col="blue")
lines(c(1,9,25,49,81),pr_RMSE_deg, type="o", col= "red")
dev.print(device = png, file = paste( "home/mathis/stage/latex/images/RMSE_precip.png"), width = 600)
#On va regarder la norme (RMSE)
fun_pr<-function(serie) sqrt(mean((serie-pr_series[,1])^2))
fun_etp<-function(serie) sqrt(mean((serie-etp_series[,1])^2))
pr_RMSE_dwnsc <- apply(pr_series[,(1:5)] ,2,fun_pr)
pr_RMSE_deg <- apply(pr_series[,c(1,7,8,9,10)] ,2,fun_pr)
etp_RMSE_dwnsc <- apply(etp_series[,(1:5)] ,2,fun_etp)
etp_RMSE_deg <- apply(etp_series[,c(1,7,8,9,10)] ,2,fun_etp)
plot(c(1,9,25,49,81),pr_RMSE_dwnsc, type="o", main="RMSE prec dwnsc(blue)/deg(red)", ylab = "RMSE", xlab= "degradation", col="blue")
#On va regarder la norme (RMSE)
fun_pr<-function(serie) sqrt(mean((serie-pr_series[,1])^2))
fun_etp<-function(serie) sqrt(mean((serie-etp_series[,1])^2))
pr_RMSE_dwnsc <- apply(pr_series[,(1:5)] ,2,fun_pr)
pr_RMSE_deg <- apply(pr_series[,c(1,7,8,9,10)] ,2,fun_pr)
etp_RMSE_dwnsc <- apply(etp_series[,(1:5)] ,2,fun_etp)
etp_RMSE_deg <- apply(etp_series[,c(1,7,8,9,10)] ,2,fun_etp)
plot(c(1,9,25,49,81),pr_RMSE_dwnsc, type="o", main="RMSE prec dwnsc(blue)/deg(red)", ylab = "RMSE", xlab= "degradation", col="blue")
lines(c(1,9,25,49,81),pr_RMSE_deg, type="o", col= "red")
dev.print(device = png, file = paste("/home/mathis/stage/latex/images/RMSE_precip.png"), width = 600)
plot(c(1,9,25,49,81),etp_RMSE_dwnsc, type="o", main="RMSE evap dwnsc(blue)/deg(red)", ylab = "RMSE", xlab= "degradation", col="blue")
lines(c(1,9,25,49,81),etp_RMSE_deg, type="o", col= "red")
#dev.print(device = png, file = paste("C:/Users/mathisDeronzier/Mathématiques/Stage LSCE downscaling upscaling/latex/images/RMSE_evap.png"), width = 600)
#On va faire un boxplot()
boxplot(pr_series, main = "boxplot precipitations", xlab="degradation")
#dev.print(device = png, file = paste("C:/Users/mathisDeronzier/Mathématiques/Stage LSCE downscaling upscaling/latex/images/boxplot_precip.png"), width = 600)
boxplot(etp_series, main = "boxplot etp",xlab="degradation")
#dev.print(device = png, file = paste("C:/Users/mathisDeronzier/Mathématiques/Stage LSCE downscaling upscaling/latex/images/boxplot_evap.png"), width = 600)
#On va faire un boxplot()
boxplot(pr_series, main = "boxplot precipitations", xlab="degradation")
dev.print(device = png, file = paste("/home/mathis/stage/latex/images/boxplot_precip.png"), width = 600)
boxplot(etp_series, main = "boxplot etp",xlab="degradation")
dev.print(device = png, file = paste("/home/mathis/stage/latex/images/boxplot_evap.png"), width = 600)
#On veut aussi comparer les quantiles
N=500
Quant<-function(serie){return(quantile(serie,probs=seq(0,1,length.out=N)))}
Quantile_pr_series<-apply(pr_series,2,Quant)
Quantile_etp_series<-apply(etp_series,2,Quant)
for (i in (2:6)){
if (i<6){
plot(Quantile_pr_series[,1], Quantile_pr_series[,i], main = paste("tracé Q-Q precip dwnsc/deg (x",(2*(i-1)+1)^2,")",sep=""), xlab = "quantiles série ref", ylab="quantiles série dwnsc", type="l", col="blue")
lines(Quantile_pr_series[,1], Quantile_pr_series[,i+5], col="red")
abline(0,1)
}
else{
plot(Quantile_pr_series[,1], Quantile_pr_series[,i],main= "tracé Q-Q precip dwnsc IPSL", xlab = "quantiles série ref", ylab="quantiles série dwnsc", type="l", col="blue")
lines(Quantile_pr_series[,1], Quantile_pr_series[,i+5], col="red")
abline(0,1)
}
}
source(paste(loc,"/codes_utiles/test_stat_Cramer_von_Mises.R",sep=""))
